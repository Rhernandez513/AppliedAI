(import java.lang.Double)
; ======== 
; templates
; ========
(deftemplate cryptocurrency
  (slot name)
  (slot symbol))
(deftemplate cryptocurrencyTimeSeriesEntry
  (slot symbol)
  (slot timestep)
  (slot openPrice)
  (slot closePrice)
  (slot twentydayMA)
  (slot ninetyninedayMA))
(deftemplate delta
  (slot value))
(deftemplate position 
  (slot symbol)
  (slot amount)
  (slot costbasis))
(deftemplate currency
  (slot symbol)
  (slot amount))
(deftemplate session
  (slot timeofday))
(deftemplate spot
  (slot price))
(deftemplate twentydayMA
  (slot value))
(deftemplate ninetyninedayMA 
  (slot value))

; ==========
; functions
; ==========

; Read in raw data
(deffunction parseInput (?csvFile)
  (import java.io.*)
  (bind ?file nil)
  (try
    (bind ?file
      (new BufferedReader
        (new java.io.FileReader ?csvFile)))
    (bind ?idx 5)
    (while (neq nil (bind ?line (?file readLine)))
      (bind ?strVal (new java.lang.String ?line))
      (bind ?firstComma (+ (call ?strVal indexOf ",") 1))
      (bind ?marketDate (call ?strVal substring 0 (- ?firstComma 1)))
      (bind ?secondComma (+ (call ?strVal indexOf "," ?firstComma) 1))
      (bind ?thirdComma (+ (call ?strVal indexOf "," ?secondComma) 1))
      (bind ?fourthComma(+ (call ?strVal indexOf "," ?thirdComma) 1))
      (bind ?openPrice (call Double valueOf (call ?strVal substring ?firstComma (- ?secondComma 1))))
      (bind ?closePrice (call Double valueOf (call ?strVal substring ?secondComma (- ?thirdComma 1))))
      (bind ?twentydayMA (call Double valueOf (call Double valueOf (call ?strVal substring ?thirdComma (- ?fourthComma 1)))))
      (bind ?ninetyninedayMA (call Double valueOf (call ?strVal substring ?fourthComma)))
      (bind ?factid (assert (cryptocurrencyTimeSeriesEntry (symbol "BTC") (timestep ?marketDate) (openPrice ?openPrice) (closePrice ?closePrice) (twentydayMA ?twentydayMA) (ninetyninedayMA ?ninetyninedayMA))))
      (bind ?idx (+ ?idx 1)))
   catch
    (printout t "Error processing file" crlf)
   finally
    (if (neq nil ?file) then
        (?file close))))

(deffunction crunch-data()
  (bind ?idx 8)
  (bind ?end 37)
  (while (< ?idx ?end)
    (bind ?idx (+ ?idx 1))
    (modify 6 (value (fact-slot-value (fact-id ?idx) twentydayMA)))
    (modify 7 (value (fact-slot-value (fact-id ?idx) ninetyninedayMA)))
    (calc-delta ?idx)
    (assert (check-ninety-nine-day))
    (run)))
    ;(assert (check-twenty-day)
    

(deffunction calc-delta (?tseid)
  (if (> ?tseid 8) then
    (if (eq day (fact-slot-value (fact-id 4) timeofday)) then
      (bind ?x (fact-slot-value (fact-id ?tseid) openPrice))
      (modify 5 (price ?x))
      (bind ?y (fact-slot-value (fact-id ?tseid) closePrice))
      (modify 5 (price ?y))
      (bind ?delta (- ?y ?x))
      (modify 4 (timeofday night))
      (modify 3 (value ?delta)))
    (if (> ?tseid 8) then
      (if (eq night (fact-slot-value (fact-id 4) timeofday)) then
        (bind ?x (fact-slot-value (fact-id (- ?tseid 1)) closePrice))
        (modify 5 (price ?x))
        (bind ?y (fact-slot-value (fact-id ?tseid) openPrice))
        (modify 5 (price ?y))
        (bind ?delta (- ?y ?x))
        (modify 4 (timeofday day))
        (modify 3 (value ?delta))))))

(deffunction cash-available()
  (> (fact-slot-value (fact-id 1) amount) (fact-slot-value (fact-id 5) price)))
(deffunction price-above-twenty-day-MA() 
  (> (fact-slot-value (fact-id 5) price) (fact-slot-value (fact-id 6) value)))
(deffunction price-above-ninetynine-day-MA() 
  (> (fact-slot-value (fact-id 5) price) (fact-slot-value (fact-id 7) value)))

; ======== 
; rulesets 
; ========
(defrule print-when-abovetwenty-day
  ?x <- (check-twenty-day)
  =>
  (if (price-above-twenty-day-MA) then
    (printout t "simulate a sell.." crlf))
  (retract ?x))

(defrule print-when-aboveninetynine-day
  ?y <- (check-ninety-nine-day)
  =>
  (if (price-above-ninetynine-day-MA) then
    (printout t "simulate a double sell.." crlf))
  (retract ?y))

;(defrule increase-position-if-positive-momentum
;  "If delta is suffeciently positive, buy."
;  ?buy <- (positive-delta)
;  =>
;  (increase-position)
;  (retract ?buy))

(defrule increase-risk-position
  ;(> delta 10%)
  ; and
  ;(cash-available)
  =>
  ; todo get global avail var w/ wallet
  ; (assert (trade(order buy) (amount (get-cash-available * 0.1
)

;(defrule decrease-risk-position
  ;(< delta 10%)
;  =>
;  (assert (order buy))
;)

;(defrule [or deffunc?] manageRisk param: riskPercentage
  ;;; using  10% riskPercentage
  ; if delta >= 10% buy more 
  ; if delta <= -10% exit position
  ; if -10% < delta < 10% hold position
  ; ... )

; ==========
; "main"
; ==========
(reset)
;(watch facts)
(watch activations)
(watch rules)
(assert (currency (symbol USD) (amount 1000000.00))) ; fact-id 1
(assert (currency (symbol BTC) (amount 0.0)))        ; fact-id 2
(assert (delta (value 0.0)))
(assert (session (timeofday day)))
(assert (spot (price 0.0)))
(assert (twentydayMA (value 0.0)))
(assert (ninetyninedayMA (value 0.0)))
(parseInput "btc_price_data_mod.csv")
(crunch-data)
;(facts)
(printout t "cash available: " (cash-available) crlf)
(printout t "price above 20 day: " (price-above-twenty-day-MA) crlf)
