; ======== 
; rulesets 
; ========

(defrule increase-risk-position
  ;(> slope 10%)
  ; and
  ;(cash-available)
  =>
  ; todo get global avail var w/ wallet
  ; (assert (trade(order buy) (amount (get-cash-available * 0.1
)

(defrule decrease-risk-position
  ;(< slope 10%)
  =>
  (assert (order buy))
)

;(defrule calc-slope
 ; ...) 
;(defrule [or deffunc?] manageRisk param: riskPercentage
  ;;; using  10% riskPercentage
  ; if slope >= 10% buy more 
  ; if slope <= -10% exit position
  ; if -10% < slope < 10% hold position
  ; ... )

; ======== 
; templates
; ========
(deftemplate cryptocurrency
  (slot name)
  (slot symbol))
(deftemplate cryptocurrencyTimeSeriesEntry
  (slot symbol)
  (slot timestep)
  (slot openPrice)
  (slot closePrice))
(deftemplate xy_point
  (slot timestep)
  (slot price))
(deftemplate slope
  (slot value))
(deftemplate cryptocurrencyMomentum
  (slot symbol)
  (slot slope))
(deftemplate position 
  (slot symbol)
  (slot amount)
  (slot costbasis))

; ==========
; functions
; ==========

; Read in raw data
(deffunction parseInput (?csvFile)
  (import java.io.*)
  (bind ?file nil)
  (try
    (bind ?file
      (new BufferedReader
        (new java.io.FileReader ?csvFile)))
    (bind ?idx 2)
    (while (neq nil (bind ?line (?file readLine)))
      (bind ?strVal (new java.lang.String ?line))
      (bind ?firstComma (+ (call ?strVal indexOf ",") 1))
      (bind ?pointInTime (call ?strVal substring 0 (- ?firstComma 1)))
      (bind ?secondComma (+ (call ?strVal indexOf "," ?firstComma) 1))
      (bind ?openPrice (call ?strVal substring ?firstComma (- ?secondComma 1)))
      (bind ?closePrice (call ?strVal substring ?secondComma))
      (bind ?factid (assert (cryptocurrencyTimeSeriesEntry (symbol "BTC") (timestep ?pointInTime) (openPrice ?openPrice) (closePrice ?closePrice))))
      (bind ?idx (+ ?idx 1))
      (calc-slope ?factid ?idx))
   catch
    (printout t "Error processing file" crlf)
   finally
    (if (neq nil ?file) then
        (?file close))))

(deffunction calc-slope (?tseid ?idx)
  (if (neq (fact-id 0) ?tseid) then
    (if (neq (fact-id 1) ?tseid) then
      (if (neq (fact-id 2) ?tseid) then
        (if (neq (fact-id 3) ?tseid) then
          (if (neq (fact-id 4) ?tseid) then
            (printout t "overnight session commencing" crlf)
            (bind ?first (fact-slot-value (fact-id (- ?idx 1)) closePrice))
            (bind ?second (fact-slot-value (fact-id ?idx) openPrice))
            (bind ?slope (/ (- ?second ?first) 2))
            (modify 2 (value ?slope)))
          (printout t "day session commencing " crlf)
          (bind ?x (fact-slot-value ?tseid openPrice))
          (bind ?y (fact-slot-value ?tseid closePrice))
          (bind ?slope (/ (- ?y ?x) 2))
          (modify 2 (value ?slope)))))))


; ==========
; "main"
; ==========
(reset)
(watch facts)
(assert (cryptocurrency (name "Bitcoin") (symbol "BTC") ))
(bind ?cash 100000)
(assert (slope (value 0)))
(parseInput "btc_price_data.csv")
;(facts)

;(defrule increase-position-if-positive-momentum
;  "If slope is suffeciently positive, buy."
;  ?buy <- (positive-slope)
;  =>
;  (increase-position)
;  (retract ?buy))


