; Run with
; $ java -cp .:fuzzyJ-OpenSource-2.0.jar:jess.jar nrc.fuzzy.jess.FuzzyMain fuzzy-btc-trader.jess

;;;;;;;;;;;;;;;
;;  imports  ;;
;;;;;;;;;;;;;;;
(import java.lang.Double)
(import nrc.fuzzy.*)
(import nrc.fuzzy.jess.*)
(load-package nrc.fuzzy.jess.FuzzyFunctions)

;;;;;;;;;;;;;;;;
;; setup vars ;;
;;;;;;;;;;;;;;;;

(watch activations)
(watch rules)
(reset)

; We use bounds for the price data because we are backtesting
(defglobal ?*price* = (new FuzzyVariable "price" 40000.0 60000.0 "USD"))

(?*price* addTerm "undervalued" (new nrc.fuzzy.PIFuzzySet 45000.0 4000.0))
(?*price* addTerm "overvalued" (new nrc.fuzzy.PIFuzzySet 55000.0 4000.0))
(?*price* addTerm "trending-price" "not undervalued and not overvalued")

(defglobal ?*buyable* = (new nrc.fuzzy.FuzzyValue ?*price* "not overvalued and undervalued and trending-price and very undervalued"))
(defglobal ?*sellable* = (new nrc.fuzzy.FuzzyValue ?*price* "somewhat overvalued and overvalued and very overvalued"))


;;;;;;;;;;;;;;;
;;   rules   ;;
;;;;;;;;;;;;;;;
(defrule buy
   (user-input-price ?a&:(fuzzy-match ?a "not overvalued and undervalued and trending-price and very undervalued"))
  =>
    (printout t "Suggest buying BTC at this price" crlf)
)

(defrule sell
   (user-input-price ?a&:(fuzzy-match ?a "somewhat overvalued and overvalued and very overvalued"))
  =>
    (printout t "Suggest selling or shorting BTC at this price" crlf)
)

; Info only
(printout t "Info only" crlf)
(printout t "buyable: " crlf (call ?*buyable* toString) crlf)
(printout t "sellable: " crlf (call ?*sellable* toString) crlf)


;;;;;;;;;;;;;;;
;; functions ;;
;;;;;;;;;;;;;;;

; read in user input
(deffunction ask-user (?question)
  (printout t ?question " ")
  (return (read)))

(deffunction fuzzyfy-price (?input-price)
 (return (new FuzzyValue ?*price* (new TriangleFuzzySet (* ?input-price .99) ?input-price (* ?input-price 1.01)))))


(printout t crlf "Input a BTC price with at least 1 decimal place, receive a buy/sell suggesstion based on recently historical prices" crlf)
(bind ?fuzzyInputPrice (fuzzyfy-price (ask-user "price? ")))
(assert (user-input-price ?fuzzyInputPrice))
(run)
